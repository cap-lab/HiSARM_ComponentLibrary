/************************************
 *
 * File : EPucSim_proximty
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <string>

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
static int group;
static int port;
// ##DEFINE_PORT_SECTION::END

static RemoteAPIClientWrapper *simulator;
static long long int proxObjectHandler[8];
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "proximity", &group, &port);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
    simulator = new RemoteAPIClientWrapper(SEMO_SIMULATOR_IP, SEMO_SIMULATOR_PORT, THIS_ROBOT_ID);
    for (int i = 0 ; i < 8 ; i++)
    {
        json option;
        option["index"] = i;
        proxObjectHandler[i] = simulator->get_object("/" + std::string(THIS_ROBOT_NAME) + "/proxSensor", option);
    }
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    int dataNum;
    uem_result result;
    double proximity[8];
    for (int i = 0 ; i < 8 ; i++)
    {
        simulator->get_proximity(proxObjectHandler[i], proximity + i);
    }
    result = UFMulticastPort_WriteToBuffer(group, port, (unsigned char *)proximity, sizeof(double) * 8, &dataNum);
    if(result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
}

TASK_CODE_END
