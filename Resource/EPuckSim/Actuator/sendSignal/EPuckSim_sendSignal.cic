/************************************
 *
 * File : EPucSim_SetSignal
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <string>

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
static int group;
static int port;
// ##DEFINE_PORT_SECTION::END
static RemoteAPIClientWrapper *simulator;
static int before = -1;
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "signal", &group, &port);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
    simulator = new RemoteAPIClientWrapper(SEMO_SIMULATOR_IP, SEMO_SIMULATOR_PORT, THIS_ROBOT_ID);
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    int dataNum;
    int detect = -1;
    uem_result result = ERR_UEM_NOERROR;
    result = UFMulticastPort_ReadFromBuffer(group, port, (unsigned char *)&detect, sizeof(int), &dataNum);
    ERRIFGOTO(result, EXIT_);
    if (dataNum > 0 && before != detect) {
        simulator->set_int32_signal(THIS_ROBOT_NAME, detect);
        before = detect;
    }
EXIT_:
    if(result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    simulator->set_int32_signal(THIS_ROBOT_NAME, -1);
}

TASK_CODE_END
