/************************************
 *
 * File : EPucSim_ledControl
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
static int led_group;
static int led_port;
static int ledControl_group;
static int ledControl_port;
// ##DEFINE_PORT_SECTION::END

typedef struct _EPUCK_LED {
    int power;
    double red;
    double green;
    double blue;
} EPUCK_LED;
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "ledControl", &ledControl_group, &ledControl_port);
    UFMulticastPort_Initialize(TASK_ID, "led", &led_group, &led_port);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    int dataNum;
    uem_result result;
    int command=FALSE;
    result = UFMulticastPort_ReadFromBuffer(ledControl_group, ledControl_port, (unsigned char *)&command, sizeof(int), &dataNum);
    ERRIFGOTO(result, EXIT_);
    if (command == TRUE) {
        EPUCK_LED led = {1, 1, 1, 1};
        result = UFMulticastPort_WriteToBuffer(led_group, led_port, (unsigned char *)&led, sizeof(EPUCK_LED), &dataNum);
    } else {
        EPUCK_LED led = {0, 0, 0, 0};
        result = UFMulticastPort_WriteToBuffer(led_group, led_port, (unsigned char *)&led, sizeof(EPUCK_LED), &dataNum);
    }
EXIT_:
    if(result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
}

TASK_CODE_END
