/************************************
 *
 * File : Turtoeblt3_wheel_raspberrypi
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_vel;
STATIC int group;
STATIC int port;
// ##DEFINE_PORT_SECTION::END

typedef struct _ControlVelocity{
    double linear_x;
    double angular_z;
} ControlVelocity;

static ControlVelocity before;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "wheel", &group, &port);
    UFPort_Initialize(TASK_ID, "vel", &port_vel);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
    before.linear_x = 0;
    before.angular_z = 0;
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    int dataNum;
    uem_result result;
    ControlVelocity vel = {0, 0};
    result = UFMulticastPort_ReadFromBuffer(group, port, (unsigned char *)&vel, sizeof(ControlVelocity), &dataNum);
    ERRIFGOTO(result, EXIT_);
    if (dataNum > 0 && (vel.linear_x != before.linear_x || vel.angular_z != before.angular_z)) {
        result = UFPort_WriteToQueue(port_vel, (unsigned char *)&vel, sizeof(ControlVelocity), 0, &dataNum);
        before.linear_x = vel.linear_x;
        before.angular_z = vel.angular_z;
    }
EXIT_:
    if(result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
}

TASK_CODE_END
