/************************************
 *
 * File : Turtlebot3_wheel_opencr
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <inttypes.h>
#include <DynamixelSDK.h>

// ##DEFINE_SECTION::START
#define LINEAR                           0
#define ANGULAR                          1
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_vel;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

typedef struct _ControlVelocity{
    double linear_x;
    double angular_z;
} ControlVelocity;

static ControlVelocity vel;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFPort_Initialize(TASK_ID, "vel", &port_vel);
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code
    initTurtleBotMotor();
    vel.linear_x = 0;
    vel.angular_z = 0;
}

/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int dataWritten;
    uem_result result;
    result = UFPort_ReadFromQueue(port_vel, (unsigned char *)&vel, sizeof(ControlVelocity), 0 , &dataWritten);    
    goal_velocity[LINEAR]  = vel.linear_x;
    goal_velocity[ANGULAR]  = vel.angular_z;
    motorSet = 1;
}

/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END

