/************************************
 *
 * File : control.cic
 * Date : Nov 22, 2022 4:14 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

// ##DEFINE_SECTION::START
#include "turtlebot3_buzzer.h"
#include "turtlebot3_led.h"
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int group_buzzer;
STATIC int port_buzzer;
STATIC int group_led;
STATIC int port_led;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

STATIC int count;
STATIC int increase;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "buzzer", &group_buzzer, &port_buzzer);
    UFMulticastPort_Initialize(TASK_ID, "led", &group_led, &port_led);
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code
	count = 0;
	increase = 1;
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    TURTLEBOT_BUZZER buzzer;
    TURTLEBOT_LED led;
    int dataLength;
	uem_result result = ERR_UEM_NOERROR;

    if(count <= 0) {
        buzzer.tone = 1000;
        buzzer.duration = 100;
        led.left = TRUE;
        led.right = TRUE;
        increase = 1;
    } else if(count >= 5) {
        buzzer.tone = 500;
        buzzer.duration = 100;
        led.left = FALSE;
        led.right = FALSE;
        increase = -1;
    }
    count += increase;

    result = UFMulticastPort_WriteToBuffer(group_buzzer, port_buzzer, (unsigned char *)&buzzer, sizeof(TURTLEBOT_BUZZER), &dataLength);
    ERRIFGOTO(result, EXIT_);
    result = UFMulticastPort_WriteToBuffer(group_led, port_led, (unsigned char *)&led, sizeof(TURTLEBOT_LED), &dataLength);
    ERRIFGOTO(result, EXIT_);
EXIT_:
    if (result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("Communication error(%X)", result);
    }
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    TURTLEBOT_LED led = {FALSE, FALSE};
    int dataLength;
    UFMulticastPort_WriteToBuffer(group_led, port_led, (unsigned char *)&led, sizeof(TURTLEBOT_LED), &dataLength);

}

TASK_CODE_END
