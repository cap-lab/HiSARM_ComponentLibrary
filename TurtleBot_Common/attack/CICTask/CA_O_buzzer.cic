/************************************
 *
 * File : checkColor.cic
 * Date : May 18, 2022 8:57 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <Arduino.h>

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END
#define BDPIN_BUZZER            31

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_buzzer;
// ##DEFINE_PORT_SECTION::END

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_buzzer = PORT_INITIALIZE(TASK_ID, "buzzer");
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code
    pinMode(BDPIN_BUZZER, OUTPUT);
}

static int count = 0;
static int increase = 1;

/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int dataLength;
    int buzzer = 0;
	uem_result result;
    result = UFPort_ReadFromQueue(port_buzzer, (unsigned char *)&buzzer, sizeof(int), 0, &dataLength);
    if(result == ERR_UEM_NOERROR) {
        if(count <= 0) {
            tone(BDPIN_BUZZER, 1000, 100);
            increase = 1;
        }
        else if(count >= 5) {
            tone(BDPIN_BUZZER, 500, 100);
            increase = 0;
        }

        if(increase == 1) {
            count++;
        }
        else {
            count--;
        }
	} 

    // int dataLength;
    // int buzzer = 0;
	// if((MQ_AVAILABLE(port_buzzer) > 0)){
    //     UFPort_ReadFromQueue(port_buzzer, (unsigned char *)&buzzer, sizeof(int), 0, &dataLength);
        
    //     int melody[] = {  1000, 800, 600, 400, 200, 0, 1400, 1200 };
    //     int noteDurations[] = {  4, 8, 8, 4, 4, 4, 4, 4};
        
    //     for (int thisNote = 0; thisNote < 8; thisNote++) {
    //         int noteDuration = 1000 / noteDurations[thisNote];
    //         tone(BDPIN_BUZZER, melody[thisNote], noteDuration);
            
    //         int pauseBetweenNotes = noteDuration * 1.30;
    //         delay(pauseBetweenNotes);
    //         // stop the tone playing:
    //         noTone(BDPIN_BUZZER);
    //     }
	// }
}




/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
