/************************************
 *
 * File : wheelControl.cic
 * Date : May 18, 2022 3:10 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <inttypes.h>
#include <DynamixelSDK.h>

// ##DEFINE_SECTION::START
#define WHEEL_NUM                        2
#define LINEAR                           0
#define ANGULAR                          1
#define CONTROL_PERIOD                   8000
// ##DEFINE_SECTION::END

typedef struct _ControlVelocity{
    double linear_x;
    double angular_z;
} ControlVelocity;


TASK_CODE_BEGIN

/*******************************************************************************
* Declaration for Hardware Timer (Interrupt control)
*******************************************************************************/
HardwareTimer Timer(TIMER_CH1);

/*******************************************************************************
* Declaration for motor
*******************************************************************************/
Turtlebot3MotorDriver motor_driver;

static float goal_velocity[WHEEL_NUM] = {0.0, 0.0};

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_velocity;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

STATIC ControlVelocity stControlVelocity;

/////////////////////////////////////
// init code
/////////////////////////////////////

void controlMoter()
{
    motor_driver.controlMotor(WHEEL_RADIUS, WHEEL_SEPARATION, goal_velocity);
}


void startDynamixelControlInterrupt()
{
    Timer.pause();
    Timer.setPeriod(CONTROL_PERIOD);           // in microseconds
    Timer.attachInterrupt(controlMoter);
    Timer.refresh();
    Timer.resume();
}

static int led_pin = 13;
static int led_pin_user[4] = { BDPIN_LED_USER_1, BDPIN_LED_USER_2, BDPIN_LED_USER_3, BDPIN_LED_USER_4 };
static int isLow = 1;

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_velocity = PORT_INITIALIZE(TASK_ID, "velocity");
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code
    stControlVelocity = {0,0};
    motor_driver.init(NAME);
    pinMode(led_pin, OUTPUT);
    startDynamixelControlInterrupt();
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int dataWritten;

   if((MQ_AVAILABLE(port_velocity) > 0)){
        UFPort_ReadFromQueue(port_velocity, (unsigned char *)&stControlVelocity, sizeof(ControlVelocity), 0 , &dataWritten);    

		int i = 0;
		if(isLow){
			for( i=0; i<4; i++ ) {
				digitalWrite(led_pin_user[i], HIGH);
			}
			isLow = 0;
        }else{
			for( i=0; i<4; i++ ) {
				digitalWrite(led_pin_user[i], LOW);
			}
			isLow = 1;
        }
		goal_velocity[LINEAR]  = stControlVelocity.linear_x;
		goal_velocity[ANGULAR]  = stControlVelocity.angular_z;
	}
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
