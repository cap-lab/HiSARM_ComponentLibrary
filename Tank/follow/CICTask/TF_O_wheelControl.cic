/************************************
 *
 * File : wheelControl.cic
 * Date : May 18, 2022 3:10 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <inttypes.h>
#include <DynamixelSDK.h>

// ##DEFINE_SECTION::START
#define LINEAR                           0
#define ANGULAR                          1

#define MAX_LINEAR_VELOCITY 0.22
#define MAX_ANGULAR_VELOCITY 2.84
#define MIN_LINEAR_VELOCITY              -MAX_LINEAR_VELOCITY  
#define MIN_ANGULAR_VELOCITY             -MAX_ANGULAR_VELOCITY 
#define INITIAL_LINEAR_X (MAX_LINEAR_VELOCITY/3)
#define INITIAL_ANGULAR_Z (MAX_ANGULAR_VELOCITY)
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_finalDirection;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

enum DIRECTION {
    FORWARD_,
    LEFT_,
    BACKWARD_,
    RIGHT_,
    STOP_
};

typedef struct _ControlVelocity{
    double linear_x;
    double angular_z;
} ControlVelocity;

static int direction;
static ControlVelocity vel;

static void convertDToV_Tank(const int &direction, ControlVelocity &vel);

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_finalDirection = PORT_INITIALIZE(TASK_ID, "finalDirection");
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code
    initTurtleBotMotor();

    direction = STOP_;
    vel={0,0};
}

/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int dataWritten;
    if((MQ_AVAILABLE(port_finalDirection) > 0)){
        UFPort_ReadFromQueue(port_finalDirection, (unsigned char *)&direction, sizeof(int), 0 , &dataWritten);    
    
        convertDToV_Tank(direction, vel);

        goal_velocity[LINEAR]  = vel.linear_x;
        goal_velocity[ANGULAR]  = vel.angular_z;

        motorSet = 1;
    }
}

static void convertDToV_Tank(const int &direction, ControlVelocity &vel){
    switch(direction)
    {        
        case STOP_:           
            vel.linear_x = 0;
            vel.angular_z = 0;
            break;
        case FORWARD_:
            vel.linear_x = INITIAL_LINEAR_X*1.4;
            vel.angular_z = 0;
            break;
        case BACKWARD_:
            vel.linear_x = -1 * INITIAL_LINEAR_X*1.4;
            vel.angular_z = 0;
            break;
        case LEFT_:
            vel.linear_x = 0;
            vel.angular_z = INITIAL_ANGULAR_Z/7*1.43;
            break;
        case RIGHT_:
            vel.linear_x = 0;
            vel.angular_z = -1 * INITIAL_ANGULAR_Z/7*1.43;
            break;   
        default:
            break;
    }
}

/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END

