/************************************
 *
 * File : R_makeDecision.cic
 * Date : Nov 11, 2022 10:55 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <iostream>
#include "semo_distance.h"

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_isEnemy;
STATIC int port_isFound;
STATIC int group_motion;
STATIC int port_motion;
STATIC int group_distance;
STATIC int port_distance;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_isEnemy = PORT_INITIALIZE(TASK_ID, "isEnemy");
    port_isFound = PORT_INITIALIZE(TASK_ID, "isFound");
    UFMulticastPort_Initialize(TASK_ID, "motion", &group_motion, &port_motion);
    UFMulticastPort_Initialize(TASK_ID, "distance", &group_distance, &port_distance);
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code   
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int dataLength;
    int motion;
    int findEnemy=0;
    int detected = 0;
    SEMO_DISTANCE distance;
    uem_result result;
    result = UFPort_ReadFromBuffer(port_isEnemy, (unsigned char *)&detected, sizeof(int), 0, &dataLength);
    ERRIFGOTO(result, EXIT_);
    result = UFMulticastPort_ReadFromBuffer(group_motion, port_motion, (unsigned char *)&motion, sizeof(int), &dataLength);    
    ERRIFGOTO(result, EXIT_);
    result = UFMulticastPort_ReadFromBuffer(group_distance, port_distance, (unsigned char *)&distance, sizeof(SEMO_DISTANCE), &dataLength);    
    ERRIFGOTO(result, EXIT_);

    SEMO_LOG_DEBUG("check detected before %d", detected);

    if (motion==0 && distance.front < 800){
        detected = 1;
    }

    //if pir_sensor detect a motion
    if (detected == 1 && distance.front < 800){
        findEnemy=1;
    }
    else {
        detected = 0;
        findEnemy = 0;
    }

    SEMO_LOG_INFO("motion %d, distance %d, detected %d, findEnemy %d", motion, distance.front, detected, findEnemy);
EXIT_:
    if (result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("Communication error(%x)", result);
    }
    UFPort_WriteToBuffer(port_isFound, (unsigned char *)&findEnemy, sizeof(int), 0, &dataLength);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
