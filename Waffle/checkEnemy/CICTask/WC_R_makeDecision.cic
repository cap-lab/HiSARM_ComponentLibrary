/************************************
 *
 * File : R_makeDecision.cic
 * Date : Nov 11, 2022 10:55 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <iostream>

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_motion;
STATIC int port_frontDistance;
STATIC int port_isEnemy;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END
static int motion = 1; //no_motion=1, motion=0
static int motionCount = 0;
static int frontDistance = 8000;
static int findEnemy=0;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_motion = PORT_INITIALIZE(TASK_ID, "motion");
    port_frontDistance = PORT_INITIALIZE(TASK_ID, "frontDistance");
    port_isEnemy = PORT_INITIALIZE(TASK_ID, "isEnemy");
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code
    
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int dataLength;
    UFPort_ReadFromBuffer(port_motion, (unsigned char *)&motion, sizeof(int), 0 , &dataLength);    
    UFPort_ReadFromQueue(port_frontDistance, (unsigned char *)&frontDistance, sizeof(int), 0 , &dataLength);    

    if (motion==0){
        motionCount++;
    }else{
        motionCount = 0;
    }

    //if pir_sensor detect a motion
    if (motionCount > 1 && frontDistance < 1000){
        findEnemy=1;
    }else{
        findEnemy=0;
    }
    
    std::cout << "motion : " << motion << std::flush;
    std::cout << "   front_distance : " << frontDistance << std::flush;
    std::cout << "   findEnemy : " << findEnemy << std::endl;

    UFPort_WriteToBuffer(port_isEnemy, (unsigned char *)&findEnemy, sizeof(int), 0, &dataLength);
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
