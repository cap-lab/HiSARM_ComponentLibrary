/************************************
 *
 * File : EPuckSim_direction
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
static int direction_group;
static int direction_port;
static int wheel_group;
static int wheel_port;
// ##DEFINE_PORT_SECTION::END
typedef struct _EPUCK_WHEEL {
    double left_vel;
    double right_vel;
} EPUCK_WHEEL;
static int before = -1;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "direction", &direction_group, &direction_port);
    UFMulticastPort_Initialize(TASK_ID, "wheel", &wheel_group, &wheel_port);
// ##INIT_PORT_SECTION::END
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    uem_result result;
    int dataLength;
    int detect = FALSE;
    SEMO_MOVE direction;
    result = UFMulticastPort_ReadFromBuffer(direction_group, direction_port, (unsigned char *) &direction, sizeof(SEMO_MOVE), &dataLength);
    ERRIFGOTO(result, EXIT_);
    if (dataLength > 0 && direction != before) {
        EPUCK_WHEEL vel = {0.0, 0.0};
        switch(direction) {
            case SEMO_MOVE_FORWARD:
                vel.left_vel = 2.0;
                vel.right_vel = 2.0;
                break;
            case SEMO_MOVE_RIGHT:
                vel.left_vel = 2.0;
                vel.right_vel = -2.0;
                break;
            case SEMO_MOVE_LEFT:
                vel.left_vel = -2.0;
                vel.right_vel = 2.0;
                break;
            case SEMO_MOVE_BACKWARD:
                vel.left_vel = -2.0;
                vel.right_vel = -2.0;
                break;
            case SEMO_MOVE_STOP:
                vel.left_vel = 0.0;
                vel.right_vel = 0.0;
                break;
            default:
                SEMO_LOG_ERROR("Wrong Direction: %d", direction);
        }
        if(THIS_ROBOT_ID == 0) 
            printf("vel %f %f\n", vel.left_vel, vel.right_vel);
        before = direction;
        result = UFMulticastPort_WriteToBuffer(wheel_group, wheel_port, (unsigned char *) &vel, sizeof(EPUCK_WHEEL), &dataLength);
    }

EXIT_:
    if (result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("Communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    int dataLength;
    EPUCK_WHEEL vel = {0.0, 0.0};
    UFMulticastPort_WriteToBuffer(wheel_group, wheel_port, (unsigned char *) &vel, sizeof(EPUCK_WHEEL), &dataLength);
}

TASK_CODE_END
