/************************************
 *
 * File : EPucSim_moveTo
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <iostream>
#include <cmath>

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

#define ARROUND 0.05

// ##DEFINE_PORT_SECTION::START
static int target_port;
static int ret_port;
static EPUCKSIM_MOVE_PORTS ports;
static int turning_mechanism;
// ##DEFINE_PORT_SECTION::END

static double points[4][2][2] = {
    {{-1.975, -0.4}, {-1.975, 0.525}},
    {{0, 0}, {0, 0.525}},
    {{1.725, -0.4}, {1.725, 0.525}},
    {{0, -0.4}, {0.375, -0.4}}
};

static int count;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFPort_Initialize(TASK_ID, "area", &target_port);
    UFPort_Initialize(TASK_ID, "arrived", &ret_port);
    UFMulticastPort_Initialize(TASK_ID, "position", &ports.position_group, &ports.position_port);
    UFMulticastPort_Initialize(TASK_ID, "orientation", &ports.orientation_group, &ports.orientation_port);
    UFMulticastPort_Initialize(TASK_ID, "proximity", &ports.proximity_group, &ports.proximity_port);
    UFMulticastPort_Initialize(TASK_ID, "wheel", &ports.wheel_group, &ports.wheel_port);
    move_init(&turning_mechanism);

// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
    ports.robot_id = THIS_ROBOT_ID;
    count = 0;
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    int target;
    int result;
    int dataLength;
    double targetPoint[2];
    double position[3];
    double *temp;
    result = UFPort_ReadFromBuffer(target_port, (unsigned char *)&target, sizeof(int), 0 , &dataLength);
    ERRIFGOTO(result, EXIT_);
    result = UFMulticastPort_ReadFromBuffer(ports.position_group, ports.position_port, (unsigned char *)position, sizeof(double) * 3, &dataLength);
    ERRIFGOTO(result, EXIT_);
    temp = points[target][count];
    targetPoint[0] = (temp[0] == 0 ? position[0] : temp[0]);
    targetPoint[1] = (temp[1] == 0 ? position[1] : temp[1]);
    if (is_arrived(ARROUND, &ports, targetPoint) == TRUE) {
        count++;
        if (count == 2) {
            int ret = 1;
            result = UFPort_WriteToQueue(ret_port, (unsigned char *)&ret, 4, 0, &dataLength);
            ERRIFGOTO(result, EXIT_);
        }
    }
    move_to_target(&ports, &turning_mechanism, targetPoint);
EXIT_:
    if (result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("Communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    move_wrapup(&ports);
}

TASK_CODE_END
