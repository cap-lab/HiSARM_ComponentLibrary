/************************************
 *
 * File : EPucSim_wait
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <iostream>
TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int fire_group;
STATIC int fire_port;
STATIC int ret_port;
STATIC int group_port;
// ##DEFINE_PORT_SECTION::END

using namespace std;
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFPort_Initialize(TASK_ID, "result", &ret_port);
    UFPort_Initialize(TASK_ID, "group", &group_port);
    UFMulticastPort_Initialize(TASK_ID, "alarmFire", &fire_group, &fire_port);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
}


/////////////////////////////////////
// go code
/////////////////////////////////////
TASK_GO
{
    int fire=0;
    int group;
    int leaderId;
    int result;
    int dataLength;
    result = UFPort_ReadFromBuffer(group_port, (unsigned char *)&group, sizeof(int), 0 , &dataLength);
    ERRIFGOTO(result, EXIT_);
    if (LIBCALL(leader, get_leader_selection_state, group) == LEADER_SELECTION_SELECTED) {
        leaderId = LIBCALL(leader, get_leader, group);
        if (leaderId == THIS_ROBOT_ID){
            result = UFMulticastPort_ReadFromBuffer(fire_group, fire_port, (unsigned char *)&fire, sizeof(int), &dataLength);
            ERRIFGOTO(result, EXIT_);
            LIBCALL(fire, set_shared_data_action, &fire);
        }else{
            fire = FALSE;
            LIBCALL(fire, get_specific_shared_data_action, leaderId, &fire);
        }
    }
    result = UFPort_WriteToBuffer(ret_port, (unsigned char *)&fire, 4, 0, &dataLength);
    ERRIFGOTO(result, EXIT_);
EXIT_:
    if (result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("Communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
}

TASK_CODE_END
