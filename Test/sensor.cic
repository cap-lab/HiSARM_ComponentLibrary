/************************************
 *
 * File : [TASK_NAME]
 * Date : [DATE]
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#pragma once
#include <iostream>

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int group;
STATIC int port;
// ##DEFINE_PORT_SECTION::END

STATIC int value;
STATIC int delta;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "sensor", &group, &port);
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    value = -1;
    delta = 1;

}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    int num;
    int result;

    if (value < 0) {
        delta = 1;
    } else if (value > 10) {
        delta = -1;
    }
    value += delta;
    
    result = UFMulticastPort_WriteToBuffer(group, port, (unsigned char *)&value, sizeof(int), &num);
    ERRIFGOTO(result, EXIT_);

    std::cout << "TASK_NAME=" << TASK_NAME << ", sensor=" <<  value << std::endl;
EXIT_:
    if(result != ERR_UEM_ERROR) {
        std::cout << "TASK_NAME=" << TASK_NAME << ", multicast error=" << result << std::endl;
    }
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END