/************************************
 *
 * File : [TASK_NAME]
 * Date : [DATE]
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#pragma once
#include <iostream>

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_arg1;
STATIC int port_max;
STATIC int port_ret;
// ##DEFINE_PORT_SECTION::END 147.46.114.124:27017

STATIC int sharedValue;

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_arg1 = PORT_INITIALIZE(TASK_ID, "arg1");
    port_max = PORT_INITIALIZE(TASK_ID, "max");
    port_ret = PORT_INITIALIZE(TASK_ID, "ret");
// ##INIT_PORT_SECTION::END

    // TODO: task initialize code
    sharedValue = 0;

}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int numOfReadWrite = 0;
    int arg1 = 0;
    int max = 0; //max
    int receivedSharedValue = 0;
    UFPort_ReadFromBuffer(port_arg1, (unsigned char *)&arg1, sizeof(arg1), 0 , &numOfReadWrite);
    UFPort_ReadFromBuffer(port_max, (unsigned char *)&max, sizeof(max), 0 , &numOfReadWrite);

    int robotId=0;
    
    if (LIBCALL(libGroupSum, avail_GROUP_SUM_action)){
        LIBCALL(libGroupSum, get_GROUP_SUM_action, &receivedSharedValue);
        std::cout << "TASK_NAME=" << TASK_NAME << ", robotId=" <<  THIS_ROBOT_ID <<  ", get sharedValue=" <<  sharedValue << std::endl;

        if(sharedValue < receivedSharedValue) sharedValue = receivedSharedValue;
    }

    if(sharedValue > max){
        UFPort_WriteToBuffer(port_ret, (unsigned char *)&sharedValue, sizeof(sharedValue), 0 , &numOfReadWrite);
    }else{
        sharedValue+=arg1;
        LIBCALL(libGroupSum, set_GROUP_SUM_action, &sharedValue);
        std::cout << "TASK_NAME=" << TASK_NAME << ", robotId=" <<  THIS_ROBOT_ID << ", set sharedValue=" <<  sharedValue << std::endl;
    }

    
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END

