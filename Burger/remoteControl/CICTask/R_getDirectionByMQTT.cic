/************************************
 *
 * File : checkDistanceByLDS.cic
 * Date : Oct 28, 2022 10:46 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <string>
#include <cctype>
#include <thread>
#include <chrono>
#define PAHO_MQTTPP_VERSIONS
#include "mqtt/async_client.h"

#define MAX_LINEAR_VELOCITY 0.22
#define MAX_ANGULAR_VELOCITY 2.84
#define INITIAL_LINEAR_X (MAX_LINEAR_VELOCITY/3)
#define INITIAL_ANGULAR_Z (MAX_ANGULAR_VELOCITY)

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_direction;
// ##DEFINE_PORT_SECTION::END

static const std::string SERVER_ADDRESS = "192.168.50.162:1883";
static const std::string CLIENT_ID = "paho_cpp_async_subcribe";
static const std::string TOPIC = "direction";
static mqtt::async_client cli(SERVER_ADDRESS, CLIENT_ID);

enum DIRECTION {
    FORWARD_,
    RIGHT_,
    BACKWARD_,
    LEFT_,
    STOP_
};
static int direction;

typedef struct _ControlVelocity{
    double linear_x;
    double angular_z;
} ControlVelocity;
static ControlVelocity vel;

void convertDirectionToMotorVelocity(const int &direction, ControlVelocity &vel);

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_direction = PORT_INITIALIZE(TASK_ID, "direction");
// ##INIT_PORT_SECTION::END
    direction=STOP_;
    vel = {0,0};
    
    // TODO: task initialize code
    auto connOpts = mqtt::connect_options_builder().clean_session(false).finalize();
    try {
        // Start consumer before connecting to make sure to not miss messages
        cli.start_consuming();
        auto tok = cli.connect(connOpts);
        auto rsp = tok->get_connect_response();
        cli.subscribe(TOPIC, 1)->wait();  //QOS = 1;
            
        std::cout << "MQTT subscriber ready." << std::endl;
        std::cout << "Waiting for messages on topic: '" << TOPIC << "'" << std::endl;
    }
    catch (const mqtt::exception& exc) {
        std::cerr << "\n  " << exc << std::endl;
    }
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    
    auto msg = cli.consume_message();
    //std::cout << msg->get_topic() << ": " << msg->to_string() << std::endl;
    
    std::string payload = msg->to_string();
    if (!payload.compare("FORWARD")){
        direction = FORWARD_;
    }else if(!payload.compare("RIGHT")){
        direction = RIGHT_;
    }else if(!payload.compare("BACKWARD")){
        direction = BACKWARD_;
    }else if(!payload.compare("LEFT")){
        direction = LEFT_;
    }else if(!payload.compare("STOP")){
        direction = STOP_;
    }

    convertDirectionToMotorVelocity(direction, vel);
    std::cout << "getDirection By MQTT " << std::endl;
    std::cout << "direction : " << direction <<std::endl;
    std::cout << vel.linear_x << "\t" << vel.angular_z <<std::endl;

    int numOfWrite;
    UFPort_WriteToQueue(port_direction, (unsigned char *)&vel, sizeof(ControlVelocity), 0, &numOfWrite);
}

void convertDirectionToMotorVelocity(const int &direction, ControlVelocity &vel){
    switch(direction)
    {        
        case STOP_:
            //std:: cout << "STOP" << std::endl;           
            vel.linear_x = 0;
            vel.angular_z = 0;
            break;
        case FORWARD_:
            //std:: cout << "FORWARD" << std::endl;
            vel.linear_x = INITIAL_LINEAR_X;
            vel.angular_z = 0;
            break;
        case BACKWARD_:
            //std:: cout << "BACKWARD" << std::endl;
            vel.linear_x = -1 * INITIAL_LINEAR_X;
            vel.angular_z = 0;
            break;
        case LEFT_:
            //std:: cout << "LEFT" << std::endl;
            vel.linear_x = 0;
            vel.angular_z = INITIAL_ANGULAR_Z/7;
            break;
        case RIGHT_:
            //std:: cout << "RIGHT" << std::endl;
            vel.linear_x = 0;
            vel.angular_z = -1 * INITIAL_ANGULAR_Z/7;
            break;   
        default:
            //std:: cout << "Wheel Control : direction is not correct. " << std::endl;
            break;
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    try {
        if (cli.is_connected()) {
            std::cout << "\nShutting down and disconnecting from the MQTT server..." << std::flush;
            cli.unsubscribe(TOPIC)->wait();
            cli.stop_consuming();
            cli.disconnect()->wait();
            std::cout << "OK" << std::endl;
        }
    }
    catch (const mqtt::exception& exc) {
        std::cerr << exc << std::endl;
    }
}

TASK_CODE_END
