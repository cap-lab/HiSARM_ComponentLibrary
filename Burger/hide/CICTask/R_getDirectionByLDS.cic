/************************************
 *
 * File : checkDistanceByLDS.cic
 * Date : Oct 28, 2022 10:46 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <iostream>
#include <vector>
#include <algorithm>
#include <stdio.h>

// ##DEFINE_SECTION::START
#define ANGLE_TO_RADIAN(angle) ((angle)*3141.59 / 180000)
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_velocity;
// ##DEFINE_PORT_SECTION::END

enum DIRECTION {
    FORWARD_,
    RIGHT_,
    BACKWARD_,
    LEFT_,
    STOP_
};

typedef struct _ControlVelocity{
    double linear_x;
    double angular_z;
} ControlVelocity;

static LiPkg *pkg;
static CmdInterfaceLinux cmd_port(8); //lds_version = 8

std::vector<int> getAroundDistance(const FrameData &data);
int getDirection(const std::vector<int> &around_distance);
void convertDirectionToMotorVelocity(const int direction, ControlVelocity &vel);

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_velocity = PORT_INITIALIZE(TASK_ID, "velocity");
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code

    //////////////////////// init LDS ///////////////////////////
    pkg = new LD08_LiPkg;    
    std::vector<std::pair<std::string, std::string>> device_list;
    std::string port_name;
    cmd_port.GetCmdDevices(device_list);
    for (auto n : device_list){
        // std::cout << n.first << "    " << n.second << std::endl;
        if (strstr(n.second.c_str(), "CP2102")){
        port_name = n.first;
        }
    }

    if (port_name.empty() == false){
        // std::cout << "FOUND LiDAR" << std::endl;
        cmd_port.SetReadCallback([&pkg](const char *byte, size_t len){
            if(pkg->Parse((uint8_t*)byte, len)){
                pkg->AssemblePacket();  
            } 
        });
    }

    if (cmd_port.Open(port_name)){
        // std::cout << "LiDAR started successfully " << std::endl;
    }
    //////////////////////// init LDS ///////////////////////////
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    ControlVelocity vel = {0, 0};
    if (pkg->IsFrameReady()){
        FrameData data = pkg->GetFrameData();
        /*
        struct FrameData
        {
            float angle_min;  //angle
            float angle_max;  //angle
            uint32_t len;
            std::vector<uint16_t> distance; //mm
            std::vector<uint8_t> intensities;
        };
        */
        float angle_min = ANGLE_TO_RADIAN(data.angle_min);
        float angle_max = ANGLE_TO_RADIAN(data.angle_max);
        float angle_increment = (angle_max - angle_min) / data.len;

        std::vector<int> around_distance=getAroundDistance(data);
        int direction = getDirection(around_distance);
        convertDirectionToMotorVelocity(direction, vel);
    }else{
        std::cout << "Can't find LiDAR" << std::endl;
    }

    int numOfWrite;
    UFPort_WriteToQueue(port_velocity, (unsigned char *)&vel, sizeof(ControlVelocity), 0, &numOfWrite);
}


std::vector<int> getAroundDistance(const FrameData &data){
    //distance = {front, right, back, left}
    std::vector<int> around_distance={8000, 8000, 8000, 8000}; //max_distance = 8m
    for (int i = 0; i < data.len; i++){
        // check one of 10 points because there are too many points.
        if (i%10==0){ 
            if(data.intensities[i]>100){ //if data is reliable
                float angle_point = (angle_min + i*angle_increment)%3.14159;
                if(angle_point < 0.39 || 2.75 < angle_point){ //front
                    around_distance[0] = std::min(around_distance[0], data.distance[i])
                    break;
                }else if( 0.39 < angle_point < 1.17 ){ //right
                    around_distance[1] = std::min(around_distance[1], data.distance[i])
                    break;
                }else if( 1.17 < angle_point < 1.96 ){ //back
                    around_distance[2] = std::min(around_distance[2], data.distance[i])
                    break;
                }else { //left
                    around_distance[3] = std::min(around_distance[3], data.distance[i])
                }
            }
        }
    }
    return around_distance;
}


int getDirection(const std::vector<int> &around_distance){
    int nearest_direction =  min_element(v.begin(), v.end()) - v.begin();
    if(around_distance[nearest_direction] <250){
        return STOP_;
    }else{
        return nearest_direction;
    }
}


void convertDirectionToMotorVelocity(const int &direction, ControlVelocity &vel){
    switch(direction)
    {        
        case STOP_:
            std:: cout << "STOP" << std::endl;           
            vel.linear_x = 0;
            vel.angular_z = 0;
            break;
        case FORWARD_:
            std:: cout << "FORWARD" << std::endl;
            vel.linear_x = INITIAL_LINEAR_X;
            vel.angular_z = 0;
            break;
        case BACKWARD_:
            std:: cout << "BACKWARD" << std::endl;
            vel.linear_x = -1 * INITIAL_LINEAR_X;
            vel.angular_z = 0;
            break;
        case LEFT_:
            std:: cout << "LEFT" << std::endl;
            vel.linear_x = 0;
            vel.angular_z = INITIAL_ANGULAR_Z/7;
            break;
        case RIGHT_:
            std:: cout << "RIGHT" << std::endl;
            vel.linear_x = 0;
            vel.angular_z = -1 * INITIAL_ANGULAR_Z/7;
            break;   
        default:
            std:: cout << "Wheel Control : direction is not correct. " << std::endl;
            break;
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
