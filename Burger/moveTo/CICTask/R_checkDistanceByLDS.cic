/************************************
 *
 * File : checkDistanceByLDS.cic
 * Date : Oct 28, 2022 10:46 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <iostream>
#include <vector>
#include <algorithm>
#include <stdio.h>
#include <chrono>
#include <thread>
#include <random>

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_area;
STATIC int port_direction;
STATIC int port_arrived;
// ##DEFINE_PORT_SECTION::END

static LiPkg *pkg;
static CmdInterfaceLinux cmd_port(8); //lds_version = 8

//for random
static std::random_device rd;
static std::mt19937 gen(rd());
static std::uniform_int_distribution<int> dis(1000, 3000);

std::vector<int> getAroundDistance(const FrameData &data)
static int direction;
static int arrived;

enum DIRECTION {
    FORWARD_,
    LEFT_,
    BACKWARD_,
    RIGHT_,
    STOP_
};

enum AREA {
    R1,
    R2
};

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_area = PORT_INITIALIZE(TASK_ID, "area");
    port_direction = PORT_INITIALIZE(TASK_ID, "direction");
    port_arrived = PORT_INITIALIZE(TASK_ID, "arrived");
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code

    //////////////////////// init LDS ///////////////////////////
    pkg = new LD08_LiPkg;    
    std::vector<std::pair<std::string, std::string>> device_list;
    std::string port_name;
    cmd_port.GetCmdDevices(device_list);
    for (auto n : device_list){
        // std::cout << n.first << "    " << n.second << std::endl;
        if (strstr(n.second.c_str(), "CP2102")){
        port_name = n.first;
        }
    }

    if (port_name.empty() == false){
        // std::cout << "FOUND LiDAR" << std::endl;
        cmd_port.SetReadCallback([&pkg](const char *byte, size_t len){
            if(pkg->Parse((uint8_t*)byte, len)){
                pkg->AssemblePacket();  
            } 
        });
    }

    if (cmd_port.Open(port_name)){
        // std::cout << "LiDAR started successfully " << std::endl;
    }
    //////////////////////// init LDS ///////////////////////////
    
    direction=STOP_;
    arrived=0;
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    int dataLength;
	int area=R1;
    UFPort_ReadFromBuffer(port_area, (unsigned char *)&area, sizeof(int), 0, &dataLength);
    // TODO: task main code
    if (pkg->IsFrameReady()){
        FrameData data = pkg->GetFrameData();
        std::vector<int> around_distance=getAroundDistance(data);

		if(arrived == 1 || around_distance[0]<250){
			direction = STOP_;
		}else if(area==R1 && around_distance[1]>500 && arrived==0){
			arrived=1;
			direction=LEFT_;
			UFPort_WriteToQueue(port_direction, (unsigned char *)&direction, sizeof(int), 0, &numOfWrite);
			std::this_thread::sleep_for(std::chrono::milliseconds(1900));
			direction = FORWARD_;
			UFPort_WriteToQueue(port_direction, (unsigned char *)&direction, sizeof(int), 0, &numOfWrite);
			std::this_thread::sleep_for(std::chrono::seconds(1));
			direction = LEFT_;
			UFPort_WriteToQueue(port_direction, (unsigned char *)&direction, sizeof(int), 0, &numOfWrite);
			std::this_thread::sleep_for(std::chrono::milliseconds(dis(gen)));
			direction = STOP_;	
		}else if (area==R2 && around_distance[3]>500 && arrived==0){
			arrived=1;
			direction=RIGHT_;
			UFPort_WriteToQueue(port_direction, (unsigned char *)&direction, sizeof(int), 0, &numOfWrite);
			std::this_thread::sleep_for(std::chrono::milliseconds(1900));
			direction = FORWARD_;
			UFPort_WriteToQueue(port_direction, (unsigned char *)&direction, sizeof(int), 0, &numOfWrite);
			std::this_thread::sleep_for(std::chrono::seconds(1));
			direction = RIGHT_;
			UFPort_WriteToQueue(port_direction, (unsigned char *)&direction, sizeof(int), 0, &numOfWrite);
			std::this_thread::sleep_for(std::chrono::milliseconds(dis(gen)));
			direction = STOP_;
		}else{
			direction = FORWARD_;
		}
    }


    UFPort_WriteToQueue(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
    UFPort_WriteToBuffer(port_arrived, (unsigned char *)&arrived, sizeof(int), 0, &dataLength);
}


std::vector<int> getAroundDistance(const FrameData &data){
    float angle_increment = (data.angle_max - data.angle_min) / data.len;
    float angle_point = data.angle_min; //1st point's angle

    std::vector<int> around_distance={8000, 8000, 8000, 8000}; //max_distance = 8m, distance = {front, left, back, right}
    for (int i = 0; i < (int)data.len; i++){
        // check one of 10 points because there are too many points.
        if (i%5==0){ 
            angle_point += (angle_increment*5);
            if(data.intensities[i]>100){ //if data is reliable
                if(angle_point < 30 || 330 < angle_point){ //front
                    around_distance[0] = (around_distance[0] < data.distance[i]) ? around_distance[0] : data.distance[i];
                }else if( 80 < angle_point && angle_point < 95 ){ //right
                    around_distance[1] = (around_distance[1] < data.distance[i]) ? around_distance[1] : data.distance[i];
                //}else if( 135 < angle_point && angle_point < 225 ){ //back
                //    around_distance[2] = (around_distance[2] < data.distance[i]) ? around_distance[2] : data.distance[i];
                }else if( 265 < angle_point && angle_point < 280 ){ //left
                    around_distance[3] = (around_distance[3] < data.distance[i]) ? around_distance[3] : data.distance[i];
                }
            }
        }
    }

    return around_distance;
}

/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
