/************************************
 *
 * File : checkDistanceByLDS.cic
 * Date : Oct 28, 2022 10:46 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <iostream>
#include <vector>
#include <algorithm>
#include <stdio.h>
#include <chrono>
#include <thread>
#include <random>

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_area;
STATIC int port_direction;
STATIC int port_arrived;
// ##DEFINE_PORT_SECTION::END

//for random
static std::random_device rd;
static std::mt19937 gen(rd());
static std::uniform_int_distribution<int> dis(1000, 3000);

static std::vector<int> getAroundDistance(const FrameData &data);
static int direction;
static int arrived;

enum DIRECTION {
    FORWARD_,
    LEFT_,
    BACKWARD_,
    RIGHT_,
    STOP_
};

enum AREA {
    R1,
    R2
};

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_area = PORT_INITIALIZE(TASK_ID, "area");
    port_direction = PORT_INITIALIZE(TASK_ID, "direction");
    port_arrived = PORT_INITIALIZE(TASK_ID, "arrived");
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code

    //////////////////////// init LDS ///////////////////////////
    init_lds();
    direction=STOP_;
    arrived=0;
}


static int front_d = 0;
static int right_d = 0;
static int left_d = 0;
static int lds_count = 0;

/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    int dataLength;
	int area=R1;
    UFPort_ReadFromBuffer(port_area, (unsigned char *)&area, sizeof(int), 0, &dataLength);
    // TODO: task main code
    
    if (arrived == 0){
        if (isFrameReady()){
            FrameData data = getFrameData();
            std::vector<int> around_distance=getAroundDistance(data);
            if (lds_count > 3){
                front_d = around_distance[0];
                right_d = around_distance[1];
                left_d = around_distance[3];

                if(front_d<350){
                    direction = STOP_;
                }else if(left_d>1000 && right_d>1000 && arrived==0){
                    if(area==R2){
                        std::cout << " turn(R2) " << std::endl;
                        arrived=1;

                        direction=LEFT_;
                        UFPort_WriteToBuffer(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
                        std::this_thread::sleep_for(std::chrono::seconds(1));

                        direction = FORWARD_;
                        UFPort_WriteToBuffer(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
                        std::this_thread::sleep_for(std::chrono::seconds(4));

                        direction = LEFT_;
                        UFPort_WriteToBuffer(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
                        std::this_thread::sleep_for(std::chrono::milliseconds(dis(gen)));

                        direction = FORWARD_;
                        UFPort_WriteToBuffer(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
                        std::this_thread::sleep_for(std::chrono::seconds(4));
                        direction = STOP_;	
                    }else{
                        std::cout << " front_d : " << front_d  << std::flush;
                        std::cout << " right_d : " << right_d  << std::flush;
                        std::cout << " left_d : " << left_d  << std::flush;
                        std::cout << " direction : " << direction  << std::endl;
                        std::cout << " turn(R1) " << std::endl;
                        arrived=1;

                        direction=RIGHT_;
                        UFPort_WriteToBuffer(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
                        std::this_thread::sleep_for(std::chrono::seconds(1));

                        direction = FORWARD_;
                        UFPort_WriteToBuffer(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
                        std::this_thread::sleep_for(std::chrono::seconds(4));

                        direction = RIGHT_;
                        UFPort_WriteToBuffer(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
                        std::this_thread::sleep_for(std::chrono::milliseconds(dis(gen)));
                        
                        direction = FORWARD_;
                        UFPort_WriteToBuffer(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
                        std::this_thread::sleep_for(std::chrono::seconds(4));
                        direction = STOP_;	
                    }
                }else{
                    direction = FORWARD_;
                }
            }
            if (lds_count <5){
                lds_count++;
            }

            std::cout << THIS_ROBOT_NAME << std::flush;
            std::cout << " front_d : " << front_d  << std::flush;
            std::cout << " right_d : " << right_d  << std::flush;
            std::cout << " left_d : " << left_d  << std::flush;
            std::cout << " direction : " << direction  << std::endl;
        }

        UFPort_WriteToBuffer(port_direction, (unsigned char *)&direction, sizeof(int), 0, &dataLength);
        UFPort_WriteToBuffer(port_arrived, (unsigned char *)&arrived, sizeof(int), 0, &dataLength);
    }else{
        if (isFrameReady()){
            FrameData data = getFrameData();
        }

    }
    
}


static std::vector<int> getAroundDistance(const FrameData &data){
    float angle_increment = (data.angle_max - data.angle_min) / data.len;
    float angle_point = data.angle_min; //1st point's angle

    std::vector<int> around_distance={8000, 8000, 8000, 8000}; //max_distance = 8m, distance = {front, left, back, right}
    for (int i = 0; i < (int)data.len; i++){
        // check one of 10 points because there are too many points.

        angle_point += angle_increment;
        if(data.intensities[i]>100){ //if data is reliable
            if(angle_point < 30 || 330 < angle_point){ //front
                around_distance[0] = (around_distance[0] < data.distance[i]) ? around_distance[0] : data.distance[i];
            }else if( 80 < angle_point && angle_point < 100 ){ //right
                around_distance[1] = (around_distance[1] < data.distance[i]) ? around_distance[1] : data.distance[i];
            //}else if( 135 < angle_point && angle_point < 225 ){ //back
            //    around_distance[2] = (around_distance[2] < data.distance[i]) ? around_distance[2] : data.distance[i];
            }else if( 260 < angle_point && angle_point < 280 ){ //left
                around_distance[3] = (around_distance[3] < data.distance[i]) ? around_distance[3] : data.distance[i];
            }
        }
    }

    return around_distance;
}

/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code

}

TASK_CODE_END
