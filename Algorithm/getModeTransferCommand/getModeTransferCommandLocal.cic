/************************************
 *
 * File : getModeTransferCommandLocal
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include <stdio.h>
TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int mode_port;
STATIC int group_port;
// ##DEFINE_PORT_SECTION::END
typedef enum _MODE {
    REMOTE_CONTROL,
    AUTO_CONTROL,
    NONE
} MODE;

using namespace std;
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFPort_Initialize(TASK_ID, "group", &group_port);
    UFPort_Initialize(TASK_ID, "mode", &mode_port);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    char ch = 0;
    int group;
    int leaderId;
    uem_result result = ERR_UEM_NOERROR;
    int dataLength;
    MODE mode = NONE;
    result = UFPort_ReadFromBuffer(group_port, (unsigned char *)&group, sizeof(int), 0 , &dataLength);
    ERRIFGOTO(result, EXIT_);
    if (LIBCALL(leader, get_leader_selection_state, group) == LEADER_SELECTION_SELECTED) {
        leaderId = LIBCALL(leader, get_leader, group);
        if (leaderId == THIS_ROBOT_ID){
            FILE* fs = fopen("command", "a+");
            if (fs != NULL){
                if (feof(fs) == 0) {
                    fgets(&ch, 1, fs);
                    if (ch  != 0){
                        switch(ch) {
                            case 'r':
                                mode = REMOTE_CONTROL;
                                break;
                            case 'a':
                                mode = AUTO_CONTROL;
                                break;
                            default:
                                SEMO_LOG_ERROR("Wrong Input: %c", ch);
                                break;
                        }
                    }
                    fseek(fs,0,SEEK_SET);
                }
                fclose(fs);
            }
        }
    }
    if (mode != NONE) {
        result = UFPort_WriteToBuffer(mode_port, (unsigned char *)&mode, sizeof(MODE), 0, &dataLength);
        ERRIFGOTO(result, EXIT_);
    }
EXIT_:
    if (result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("Communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
}

TASK_CODE_END

