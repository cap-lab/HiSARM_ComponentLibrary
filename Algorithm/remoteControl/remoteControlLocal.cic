/************************************
 *
 * File : remoteControlLocal.cic
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include "semo_direction.h"
#include <iostream>
TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int direction_group;
STATIC int direction_port;
STATIC int group_port;
STATIC int direction = STOP_;
// ##DEFINE_PORT_SECTION::END

using namespace std;
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "direction", &direction_group, &direction_port);
    UFPort_Initialize(TASK_ID, "group", &group_port);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    char ch = 0;
    int group;
    int leaderId;
    int result;
    int dataLength;
    result = UFPort_ReadFromBuffer(group_port, (unsigned char *)&group, sizeof(int), 0 , &dataLength);
    ERRIFGOTO(result, EXIT_);
    if (LIBCALL(leader, get_leader_selection_state, group) == LEADER_SELECTION_SELECTED) {
        leaderId = LIBCALL(leader, get_leader, group);
        if (leaderId == THIS_ROBOT_ID){
            std::cin >> ch;
            LIBCALL(KEY_INPUT, set_KEY_INPUT_action, &ch);
            
        }else {
            if(LIBCALL(KEY_INPUT, avail_KEY_INPUT_action)) {
                LIBCALL(KEY_INPUT, get_KEY_INPUT_action, &ch);
            }
        }
        if (ch  != 0){
            switch(ch) {
                case '8':
                    direction = FORWARD_;
                    break;
                case '4':
                    direction = LEFT_;
                    break;
                case '2':
                    direction = BACKWARD_;
                    break;
                case '6':
                    direction = RIGHT_;
                    break;
                case '5':
                    direction = STOP_;
                    break;
                default:
                    direction = STOP_;
                    break;
            }
        }
    }
    result = UFMulticastPort_WriteToBuffer(direction_group, direction_port, (unsigned char *)&direction, sizeof(int), &dataLength);
    ERRIFGOTO(result, EXIT_);
EXIT_:
    if (result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("Communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
}

TASK_CODE_END

